# -*- coding: utf-8 -*-
"""Predict the employee burn out rate

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tooKUknALxA1N7mj_wNLecMsGlMzUVZs
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from google.colab import files
uploaded = files.upload()

train = pd.read_csv('train.csv')
test  = pd.read_csv('test.csv')

print(train.shape, test.shape)

burn_rate = train['Burn Rate']

employee_id  = test['Employee ID']

X  = pd.concat([train.drop(['Burn Rate'],axis=1),test],axis=0)

burn_rate1 =  burn_rate.fillna(burn_rate.mean())

X['Mental Fatigue Score'].fillna(X['Mental Fatigue Score'].mean(),inplace=True)

X['Resource Allocation'].fillna(X['Resource Allocation'].mean(),inplace=True)

## Pandas Way
today=pd.datetime.today()
today

dates = pd.to_datetime(X['Date of Joining'])
type(dates)

diff = today-dates

diff = diff/np.timedelta64(1, 'Y')

X['Experience'] = pd.Series(diff)

X.drop(['Date of Joining'],axis=1,inplace=True)

X.isnull().any()



X_categorical = pd.get_dummies(X, columns=['Gender','Company Type','WFH Setup Available','Designation'],drop_first=True)
X_categorical.head()

X_categorical.drop(['Employee ID'],axis=1,inplace=True)

from sklearn.preprocessing import MinMaxScaler
X_cat_norm = MinMaxScaler().fit_transform(X_categorical)

X_train = X_cat_norm[:22750,:]
X_test  = X_cat_norm[22750:,:]

burn_rate1=burn_rate1.to_numpy()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X_train, burn_rate1, test_size=0.2)
print(x_train.shape, x_test.shape)

np.any(np.isnan(X_test))



from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor()

from sklearn.model_selection import GridSearchCV, cross_val_score
parameter = [{'n_estimators':[100,500,1000], 'max_depth':[10,50,100], 'min_samples_split':[2,5,10]}]
gs = GridSearchCV(rfr, param_grid = parameter, scoring='r2', cv=10)
gs = gs.fit(x_train,y_train)

gs.best_score_

gs.best_params_

rfr = RandomForestRegressor(n_estimators=300 ,max_depth=50 , min_samples_split=10 )
rfr = rfr.fit(x_train,y_train)
y_pred = rfr.predict(x_test)

cvs  = cross_val_score(rfr, x_train, y_train, cv=10, scoring='r2')
cvs.mean()

from sklearn.metrics import r2_score
r2_score(y_pred,y_test)



y_pred = rfr.predict(X_test)

result  = pd.Series(y_pred)
submission  = pd.concat([employee_id,result],axis=1)
submission.columns=['Employee ID', 'Burn Rate']
submission.to_csv('submission2.csv',index=False)



